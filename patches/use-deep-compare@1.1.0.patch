diff --git a/dist-node/index.js b/dist-node/index.js
index 80a816dc59a6c31b6c0ee1fd91453d2997a89f53..03e228c18fff1feac994226d4508366ac5c6c13a 100644
--- a/dist-node/index.js
+++ b/dist-node/index.js
@@ -5,7 +5,7 @@ Object.defineProperty(exports, '__esModule', { value: true });
 function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
 
 var React = _interopDefault(require('react'));
-var deepEqual = _interopDefault(require('dequal'));
+var {dequal} = _interopDefault(require('dequal'));
 
 function checkDeps(deps, name) {
   const reactHookName = `React.${name.replace(/DeepCompare/, "")}`;
@@ -17,7 +17,7 @@ function checkDeps(deps, name) {
 function useDeepCompareMemoize(value) {
   const ref = React.useRef([]);
 
-  if (!deepEqual(value, ref.current)) {
+  if (!dequal(value, ref.current)) {
     ref.current = value;
   }
 
diff --git a/dist-node/index.js.map b/dist-node/index.js.map
index 135ab2d49dec904fc33bcb1dbc570382bfbcdf47..cbc991203f0a6a545802a58b5554d4f964d35662 100644
--- a/dist-node/index.js.map
+++ b/dist-node/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sources":["../dist-src/useDeepCompareMemoize.js","../dist-src/useDeepCompareCallback.js","../dist-src/useDeepCompareEffect.js","../dist-src/useDeepCompareMemo.js"],"sourcesContent":["import React from \"react\";\nimport deepEqual from \"dequal\";\nexport function checkDeps(deps, name) {\n  const reactHookName = `React.${name.replace(/DeepCompare/, \"\")}`;\n\n  if (!deps || deps.length === 0) {\n    throw new Error(`${name} should not be used with no dependencies. Use ${reactHookName} instead.`);\n  }\n}\nexport function useDeepCompareMemoize(value) {\n  const ref = React.useRef([]);\n\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` will return a memoized version of the callback that\n * only changes if one of the `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareCallback(callback, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareCallback');\n  }\n\n  return React.useCallback(callback, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareCallback;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` Accepts a function that contains imperative, possibly\n * effectful code.\n *\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list\n * change.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareEffect(effect, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareEffect');\n  }\n\n  React.useEffect(effect, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareEffect;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareMemo` will only recompute the memoized value when one of the\n * `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useMemo.\n *\n */\n\nfunction useDeepCompareMemo(factory, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareMemo');\n  }\n\n  return React.useMemo(factory, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareMemo;"],"names":["checkDeps","deps","name","reactHookName","replace","length","Error","useDeepCompareMemoize","value","ref","React","useRef","deepEqual","current","useDeepCompareCallback","callback","dependencies","process","env","NODE_ENV","useCallback","useDeepCompareEffect","effect","useEffect","useDeepCompareMemo","factory","useMemo"],"mappings":";;;;;;;;;AAEO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;QAC9BC,aAAa,GAAI,SAAQD,IAAI,CAACE,OAAL,CAAa,aAAb,EAA4B,EAA5B,CAAgC,EAA/D;;MAEI,CAACH,IAAD,IAASA,IAAI,CAACI,MAAL,KAAgB,CAA7B,EAAgC;UACxB,IAAIC,KAAJ,CAAW,GAAEJ,IAAK,iDAAgDC,aAAc,WAAhF,CAAN;;;AAGJ,AAAO,SAASI,qBAAT,CAA+BC,KAA/B,EAAsC;QACrCC,GAAG,GAAGC,KAAK,CAACC,MAAN,CAAa,EAAb,CAAZ;;MAEI,CAACC,SAAS,CAACJ,KAAD,EAAQC,GAAG,CAACI,OAAZ,CAAd,EAAoC;IAClCJ,GAAG,CAACI,OAAJ,GAAcL,KAAd;;;SAGKC,GAAG,CAACI,OAAX;;;ACdF;;;;;;;;;AASA,SAASC,sBAAT,CAAgCC,QAAhC,EAA0CC,YAA1C,EAAwD;MAClDC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCnB,SAAS,CAACgB,YAAD,EAAe,wBAAf,CAAT;;;SAGKN,KAAK,CAACU,WAAN,CAAkBL,QAAlB,EAA4BR,qBAAqB,CAACS,YAAD,CAAjD,CAAP;;;ACdF;;;;;;;;;;;;;AAaA,SAASK,oBAAT,CAA8BC,MAA9B,EAAsCN,YAAtC,EAAoD;MAC9CC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCnB,SAAS,CAACgB,YAAD,EAAe,sBAAf,CAAT;;;EAGFN,KAAK,CAACa,SAAN,CAAgBD,MAAhB,EAAwBf,qBAAqB,CAACS,YAAD,CAA7C;;;AClBF;;;;;;;;;AASA,SAASQ,kBAAT,CAA4BC,OAA5B,EAAqCT,YAArC,EAAmD;MAC7CC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCnB,SAAS,CAACgB,YAAD,EAAe,oBAAf,CAAT;;;SAGKN,KAAK,CAACgB,OAAN,CAAcD,OAAd,EAAuBlB,qBAAqB,CAACS,YAAD,CAA5C,CAAP;;;;;;;"}
\ No newline at end of file
+{"version":3,"file":"index.js","sources":["../dist-src/useDeepCompareMemoize.js","../dist-src/useDeepCompareCallback.js","../dist-src/useDeepCompareEffect.js","../dist-src/useDeepCompareMemo.js"],"sourcesContent":["import React from \"react\";\nimport {dequal} from \"dequal\";\nexport function checkDeps(deps, name) {\n  const reactHookName = `React.${name.replace(/DeepCompare/, \"\")}`;\n\n  if (!deps || deps.length === 0) {\n    throw new Error(`${name} should not be used with no dependencies. Use ${reactHookName} instead.`);\n  }\n}\nexport function useDeepCompareMemoize(value) {\n  const ref = React.useRef([]);\n\n  if (!dequal(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` will return a memoized version of the callback that\n * only changes if one of the `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareCallback(callback, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareCallback');\n  }\n\n  return React.useCallback(callback, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareCallback;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` Accepts a function that contains imperative, possibly\n * effectful code.\n *\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list\n * change.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareEffect(effect, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareEffect');\n  }\n\n  React.useEffect(effect, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareEffect;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareMemo` will only recompute the memoized value when one of the\n * `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useMemo.\n *\n */\n\nfunction useDeepCompareMemo(factory, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareMemo');\n  }\n\n  return React.useMemo(factory, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareMemo;"],"names":["checkDeps","deps","name","reactHookName","replace","length","Error","useDeepCompareMemoize","value","ref","React","useRef","dequal","current","useDeepCompareCallback","callback","dependencies","process","env","NODE_ENV","useCallback","useDeepCompareEffect","effect","useEffect","useDeepCompareMemo","factory","useMemo"],"mappings":";;;;;;;;;AAEO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;QAC9BC,aAAa,GAAI,SAAQD,IAAI,CAACE,OAAL,CAAa,aAAb,EAA4B,EAA5B,CAAgC,EAA/D;;MAEI,CAACH,IAAD,IAASA,IAAI,CAACI,MAAL,KAAgB,CAA7B,EAAgC;UACxB,IAAIC,KAAJ,CAAW,GAAEJ,IAAK,iDAAgDC,aAAc,WAAhF,CAAN;;;AAGJ,AAAO,SAASI,qBAAT,CAA+BC,KAA/B,EAAsC;QACrCC,GAAG,GAAGC,KAAK,CAACC,MAAN,CAAa,EAAb,CAAZ;;MAEI,CAACC,SAAS,CAACJ,KAAD,EAAQC,GAAG,CAACI,OAAZ,CAAd,EAAoC;IAClCJ,GAAG,CAACI,OAAJ,GAAcL,KAAd;;;SAGKC,GAAG,CAACI,OAAX;;;ACdF;;;;;;;;;AASA,SAASC,sBAAT,CAAgCC,QAAhC,EAA0CC,YAA1C,EAAwD;MAClDC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCnB,SAAS,CAACgB,YAAD,EAAe,wBAAf,CAAT;;;SAGKN,KAAK,CAACU,WAAN,CAAkBL,QAAlB,EAA4BR,qBAAqB,CAACS,YAAD,CAAjD,CAAP;;;ACdF;;;;;;;;;;;;;AAaA,SAASK,oBAAT,CAA8BC,MAA9B,EAAsCN,YAAtC,EAAoD;MAC9CC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCnB,SAAS,CAACgB,YAAD,EAAe,sBAAf,CAAT;;;EAGFN,KAAK,CAACa,SAAN,CAAgBD,MAAhB,EAAwBf,qBAAqB,CAACS,YAAD,CAA7C;;;AClBF;;;;;;;;;AASA,SAASQ,kBAAT,CAA4BC,OAA5B,EAAqCT,YAArC,EAAmD;MAC7CC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCnB,SAAS,CAACgB,YAAD,EAAe,oBAAf,CAAT;;;SAGKN,KAAK,CAACgB,OAAN,CAAcD,OAAd,EAAuBlB,qBAAqB,CAACS,YAAD,CAA5C,CAAP;;;;;;;"}
\ No newline at end of file
diff --git a/dist-src/useDeepCompareMemoize.js b/dist-src/useDeepCompareMemoize.js
index 8d0d682bea50261e17e1a532a8b22cc190cb4d76..97f54237d772e4ffb749df3463cfb0239a8cb374 100644
--- a/dist-src/useDeepCompareMemoize.js
+++ b/dist-src/useDeepCompareMemoize.js
@@ -1,5 +1,5 @@
 import React from "react";
-import deepEqual from "dequal";
+import {dequal} from "dequal";
 export function checkDeps(deps, name) {
   const reactHookName = `React.${name.replace(/DeepCompare/, "")}`;
 
@@ -10,7 +10,7 @@ export function checkDeps(deps, name) {
 export function useDeepCompareMemoize(value) {
   const ref = React.useRef([]);
 
-  if (!deepEqual(value, ref.current)) {
+  if (!dequal(value, ref.current)) {
     ref.current = value;
   }
 
diff --git a/dist-web/index.js b/dist-web/index.js
index efb0d3cb820436113302749ba79594f28e9629f7..4fa275b248d9478cf03b96cf90741213763ec7be 100644
--- a/dist-web/index.js
+++ b/dist-web/index.js
@@ -1,5 +1,5 @@
 import React from 'react';
-import deepEqual from 'dequal';
+import {dequal} from 'dequal';
 
 function checkDeps(deps, name) {
   const reactHookName = `React.${name.replace(/DeepCompare/, "")}`;
@@ -11,7 +11,7 @@ function checkDeps(deps, name) {
 function useDeepCompareMemoize(value) {
   const ref = React.useRef([]);
 
-  if (!deepEqual(value, ref.current)) {
+  if (!dequal(value, ref.current)) {
     ref.current = value;
   }
 
diff --git a/dist-web/index.js.map b/dist-web/index.js.map
index e7160ed271ca14717bac69df284564d1db706f00..c1557fc345084905ec5f8c91148ce443070eb59c 100644
--- a/dist-web/index.js.map
+++ b/dist-web/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sources":["../dist-src/useDeepCompareMemoize.js","../dist-src/useDeepCompareCallback.js","../dist-src/useDeepCompareEffect.js","../dist-src/useDeepCompareMemo.js"],"sourcesContent":["import React from \"react\";\nimport deepEqual from \"dequal\";\nexport function checkDeps(deps, name) {\n  const reactHookName = `React.${name.replace(/DeepCompare/, \"\")}`;\n\n  if (!deps || deps.length === 0) {\n    throw new Error(`${name} should not be used with no dependencies. Use ${reactHookName} instead.`);\n  }\n}\nexport function useDeepCompareMemoize(value) {\n  const ref = React.useRef([]);\n\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` will return a memoized version of the callback that\n * only changes if one of the `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareCallback(callback, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareCallback');\n  }\n\n  return React.useCallback(callback, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareCallback;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` Accepts a function that contains imperative, possibly\n * effectful code.\n *\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list\n * change.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareEffect(effect, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareEffect');\n  }\n\n  React.useEffect(effect, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareEffect;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareMemo` will only recompute the memoized value when one of the\n * `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useMemo.\n *\n */\n\nfunction useDeepCompareMemo(factory, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareMemo');\n  }\n\n  return React.useMemo(factory, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareMemo;"],"names":[],"mappings":";;;AAEO,SAAS,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE;EACpC,MAAM,aAAa,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEjE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAI,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,8CAA8C,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;GACnG;CACF;AACD,AAAO,SAAS,qBAAqB,CAAC,KAAK,EAAE;EAC3C,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;;EAE7B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE;IAClC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC;GACrB;;EAED,OAAO,GAAG,CAAC,OAAO,CAAC;;;CACpB,DCfD;;;;;;;;;AASA,SAAS,sBAAsB,CAAC,QAAQ,EAAE,YAAY,EAAE;EACtD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,SAAS,CAAC,YAAY,EAAE,wBAAwB,CAAC,CAAC;GACnD;;EAED,OAAO,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;CACzE;;ACfD;;;;;;;;;;;;;AAaA,SAAS,oBAAoB,CAAC,MAAM,EAAE,YAAY,EAAE;EAClD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,SAAS,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;GACjD;;EAED,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;CAC9D;;ACnBD;;;;;;;;;AASA,SAAS,kBAAkB,CAAC,OAAO,EAAE,YAAY,EAAE;EACjD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,SAAS,CAAC,YAAY,EAAE,oBAAoB,CAAC,CAAC;GAC/C;;EAED,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;CACpE;;;;"}
\ No newline at end of file
+{"version":3,"file":"index.js","sources":["../dist-src/useDeepCompareMemoize.js","../dist-src/useDeepCompareCallback.js","../dist-src/useDeepCompareEffect.js","../dist-src/useDeepCompareMemo.js"],"sourcesContent":["import React from \"react\";\nimport {dequal} from \"dequal\";\nexport function checkDeps(deps, name) {\n  const reactHookName = `React.${name.replace(/DeepCompare/, \"\")}`;\n\n  if (!deps || deps.length === 0) {\n    throw new Error(`${name} should not be used with no dependencies. Use ${reactHookName} instead.`);\n  }\n}\nexport function useDeepCompareMemoize(value) {\n  const ref = React.useRef([]);\n\n  if (!dequal(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` will return a memoized version of the callback that\n * only changes if one of the `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareCallback(callback, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareCallback');\n  }\n\n  return React.useCallback(callback, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareCallback;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareEffect` Accepts a function that contains imperative, possibly\n * effectful code.\n *\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list\n * change.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\nfunction useDeepCompareEffect(effect, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareEffect');\n  }\n\n  React.useEffect(effect, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareEffect;","import React from 'react';\nimport { checkDeps, useDeepCompareMemoize } from \"./useDeepCompareMemoize.js\";\n/**\n * `useDeepCompareMemo` will only recompute the memoized value when one of the\n * `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useMemo.\n *\n */\n\nfunction useDeepCompareMemo(factory, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareMemo');\n  }\n\n  return React.useMemo(factory, useDeepCompareMemoize(dependencies));\n}\n\nexport default useDeepCompareMemo;"],"names":[],"mappings":";;;AAEO,SAAS,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE;EACpC,MAAM,aAAa,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEjE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAI,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,8CAA8C,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;GACnG;CACF;AACD,AAAO,SAAS,qBAAqB,CAAC,KAAK,EAAE;EAC3C,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;;EAE7B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE;IAClC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC;GACrB;;EAED,OAAO,GAAG,CAAC,OAAO,CAAC;;;CACpB,DCfD;;;;;;;;;AASA,SAAS,sBAAsB,CAAC,QAAQ,EAAE,YAAY,EAAE;EACtD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,SAAS,CAAC,YAAY,EAAE,wBAAwB,CAAC,CAAC;GACnD;;EAED,OAAO,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;CACzE;;ACfD;;;;;;;;;;;;;AAaA,SAAS,oBAAoB,CAAC,MAAM,EAAE,YAAY,EAAE;EAClD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,SAAS,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;GACjD;;EAED,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;CAC9D;;ACnBD;;;;;;;;;AASA,SAAS,kBAAkB,CAAC,OAAO,EAAE,YAAY,EAAE;EACjD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,SAAS,CAAC,YAAY,EAAE,oBAAoB,CAAC,CAAC;GAC/C;;EAED,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC;CACpE;;;;"}
\ No newline at end of file
diff --git a/package.json b/package.json
index 0a9bdc242cd688bbf9fce7b162175926d3397145..cc3531e66526efc8c07092b2aee956c5333a180d 100644
--- a/package.json
+++ b/package.json
@@ -14,7 +14,7 @@
     "url": "https://github.com/sandiiarov/use-deep-compare.git"
   },
   "dependencies": {
-    "dequal": "1.0.0"
+    "dequal": "2.0.3"
   },
   "peerDependencies": {
     "react": ">=16.8.0"
