diff --git a/android/src/main/java/expo/modules/imagepicker/contracts/ImageLibraryContract.kt b/android/src/main/java/expo/modules/imagepicker/contracts/ImageLibraryContract.kt
index 6c4255640db70623510e9cc26aa3f542b13ed258..0281f1d2ae0b23413efef8ac7ac215ffb4f3973d 100644
--- a/android/src/main/java/expo/modules/imagepicker/contracts/ImageLibraryContract.kt
+++ b/android/src/main/java/expo/modules/imagepicker/contracts/ImageLibraryContract.kt
@@ -14,6 +14,7 @@ import expo.modules.imagepicker.UNLIMITED_SELECTION
 import expo.modules.imagepicker.getAllDataUris
 import expo.modules.imagepicker.toMediaType
 import expo.modules.kotlin.activityresult.AppContextActivityResultContract
+import expo.modules.kotlin.exception.Exceptions
 import expo.modules.kotlin.providers.AppContextProvider
 import java.io.Serializable
 
@@ -28,49 +29,23 @@ internal class ImageLibraryContract(
   private val appContextProvider: AppContextProvider,
 ) : AppContextActivityResultContract<ImageLibraryContractOptions, ImagePickerContractResult> {
   private val contentResolver: ContentResolver
-    get() = requireNotNull(appContextProvider.appContext.reactContext) {
-      "React Application Context is null"
-    }.contentResolver
+    get() = appContextProvider.appContext.reactContext?.contentResolver
+      ?: throw Exceptions.ReactContextLost()
 
   override fun createIntent(context: Context, input: ImageLibraryContractOptions): Intent {
-    val request = PickVisualMediaRequest.Builder()
-      .setMediaType(
-        when (input.options.mediaTypes) {
-          MediaTypes.VIDEOS -> {
-            PickVisualMedia.VideoOnly
-          }
-
-          MediaTypes.IMAGES -> {
-            PickVisualMedia.ImageOnly
-          }
-
-          else -> {
-            PickVisualMedia.ImageAndVideo
-          }
-        }
-      )
-      .build()
+    val intent = Intent(Intent.ACTION_GET_CONTENT)
+            .addCategory(Intent.CATEGORY_OPENABLE)
+            .setType("image/*")
 
     if (input.options.allowsMultipleSelection) {
-      val selectionLimit = input.options.selectionLimit
-
-      if (selectionLimit == 1) {
-        // If multiple selection is allowed but the limit is 1, we should ignore
-        // the multiple selection flag and just treat it as a single selection.
-        return PickVisualMedia().createIntent(context, request)
+      if(input.options.selectionLimit == 1) {
+        return intent
       }
 
-      if (selectionLimit > 1) {
-        return PickMultipleVisualMedia(selectionLimit).createIntent(context, request)
-      }
-
-      // If the selection limit is 0, it is the same as unlimited selection.
-      if (selectionLimit == UNLIMITED_SELECTION) {
-        return PickMultipleVisualMedia().createIntent(context, request)
-      }
+      intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true)
     }
 
-    return PickVisualMedia().createIntent(context, request)
+    return intent
   }
 
   override fun parseResult(input: ImageLibraryContractOptions, resultCode: Int, intent: Intent?) =
@@ -86,9 +61,9 @@ internal class ImageLibraryContract(
           )
         } else {
           if (intent.data != null) {
-            intent.data?.let {
-              val type = it.toMediaType(contentResolver)
-              ImagePickerContractResult.Success(listOf(type to it))
+            intent.data?.let { uri ->
+              val type = uri.toMediaType(contentResolver)
+              ImagePickerContractResult.Success(listOf(type to uri))
             }
           } else {
             uris.firstOrNull()?.let { uri ->
@@ -104,3 +79,4 @@ internal class ImageLibraryContract(
 internal data class ImageLibraryContractOptions(
   val options: ImagePickerOptions
 ) : Serializable
+
