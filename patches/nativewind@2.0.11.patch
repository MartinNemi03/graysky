diff --git a/dist/style-sheet/color-scheme.d.ts b/dist/style-sheet/color-scheme.d.ts
index f4395202c8253b95977477c1c5c06e3cdb20f3f2..05492dc4cc5291ece7b21ffd9d7d914ec586b03a 100644
--- a/dist/style-sheet/color-scheme.d.ts
+++ b/dist/style-sheet/color-scheme.d.ts
@@ -9,6 +9,7 @@ export declare abstract class ColorSchemeStore {
     private notifyColorScheme;
     subscribeColorScheme: (listener: () => void) => () => boolean;
     getColorScheme: () => ColorSchemeName;
+    getColorSchemeSystem: () => ColorSchemeSystem;
     setColorScheme: (colorSchemeSystem: ColorSchemeSystem) => void;
     toggleColorScheme: () => void;
 }
diff --git a/dist/style-sheet/color-scheme.js b/dist/style-sheet/color-scheme.js
index c08e40b8a577c01a97d18b2b0fea6ce2aafb3b63..c78643218497105a9ab52c63167f9bc3e8020b3f 100644
--- a/dist/style-sheet/color-scheme.js
+++ b/dist/style-sheet/color-scheme.js
@@ -7,6 +7,19 @@ class ColorSchemeStore {
         this.colorSchemeListeners = new Set();
         this.colorScheme = react_native_1.Appearance.getColorScheme() || "light";
         this.colorSchemeSystem = "system";
+        react_native_1.Appearance.addChangeListener(() => {
+            // this for some goddamn reason doesn't run immediately
+            // so this part is just for dark: and the hook uses
+            // useColorScheme directly
+            if (this.colorSchemeSystem === "system") {
+                const oldScheme = this.colorScheme;
+                this.colorScheme = react_native_1.Appearance.getColorScheme() || "light";
+                if (oldScheme !== this.colorScheme) {
+                    this.notifyMedia(["colorScheme"]);
+                    this.notifyColorScheme();
+                }
+            }
+        });
         this.subscribeColorScheme = (listener) => {
             this.colorSchemeListeners.add(listener);
             return () => this.colorSchemeListeners.delete(listener);
@@ -14,6 +27,9 @@ class ColorSchemeStore {
         this.getColorScheme = () => {
             return this.colorScheme;
         };
+        this.getColorSchemeSystem = () => {
+            return this.colorSchemeSystem;
+        };
         this.setColorScheme = (colorSchemeSystem) => {
             const oldColorScheme = this.colorScheme;
             this.colorSchemeSystem = colorSchemeSystem;
diff --git a/dist/style-sheet/index.d.ts b/dist/style-sheet/index.d.ts
index 72d8ec99250f691027d60a2b20813f327f49dca5..9e2d5c5568843f5d4afec6ebab2815fbaf6e90aa 100644
--- a/dist/style-sheet/index.d.ts
+++ b/dist/style-sheet/index.d.ts
@@ -16,6 +16,8 @@ export declare const NativeWindStyleSheet: {
         native?: "native" | "css" | undefined;
         default?: "native" | "css" | undefined;
     }) => void;
+    getColorScheme: () => import("./color-scheme").ColorSchemeName;
+    getColorScheme: () => import("./color-scheme").ColorSchemeSystem;
     setColorScheme: (colorSchemeSystem: import("./color-scheme").ColorSchemeSystem) => void;
     platformSelect: {
         <T>(specifics: ({
diff --git a/dist/style-sheet/index.js b/dist/style-sheet/index.js
index 1990a7a881d44783d6a1b7dbfea23eb789b04fc7..9d570fefa30a3faddaca301f2ed0c28f221f5135 100644
--- a/dist/style-sheet/index.js
+++ b/dist/style-sheet/index.js
@@ -12,6 +12,8 @@ exports.NativeWindStyleSheet = {
     setAppearance: runtime.setAppearance.bind(runtime),
     setPlatform: runtime.setPlatform.bind(runtime),
     setOutput: runtime.setOutput.bind(runtime),
+    getColorScheme: runtime.getColorScheme.bind(runtime),
+    getColorSchemeSystem: runtime.getColorSchemeSystem.bind(runtime),
     setColorScheme: runtime.setColorScheme.bind(runtime),
     platformSelect: runtime.platformSelect.bind(runtime),
     platformColor: runtime.platformColor.bind(runtime),
diff --git a/dist/style-sheet/runtime.js b/dist/style-sheet/runtime.js
index 513e6cf6ab6b3884b1b387dd8879eb6788800cb5..b44984c3cf27b337eb3d23288cc9332080455aee 100644
--- a/dist/style-sheet/runtime.js
+++ b/dist/style-sheet/runtime.js
@@ -95,14 +95,15 @@ class StyleSheetRuntime extends color_scheme_1.ColorSchemeStore {
         });
     }
     setAppearance(appearance) {
-        var _a;
-        (_a = this.appearanceListener) === null || _a === void 0 ? void 0 : _a.remove();
-        this.appearanceListener = appearance.addChangeListener(({ colorScheme }) => {
-            if (this.colorSchemeSystem === "system") {
-                this.colorScheme = colorScheme || "light";
-                this.notifyMedia(["colorScheme"]);
-            }
-        });
+        // this doesn't update the hook!
+        // var _a;
+        // (_a = this.appearanceListener) === null || _a === void 0 ? void 0 : _a.remove();
+        // this.appearanceListener = appearance.addChangeListener(() => {
+        //     if (this.colorSchemeSystem === "system") {
+        //         this.colorScheme = appearance.getColorScheme() || "light";
+        //         this.notifyMedia(["colorScheme"]);
+        //     }
+        // });
     }
     setPlatform(platform) {
         this.platform = platform;
diff --git a/dist/use-color-scheme.d.ts b/dist/use-color-scheme.d.ts
index d7f7cab8b7f906a3c0a476a60efddeee6c947bd5..f136ed3dcf5596cbec8a0e6118b5ac524470773d 100644
--- a/dist/use-color-scheme.d.ts
+++ b/dist/use-color-scheme.d.ts
@@ -1,5 +1,7 @@
 export declare function useColorScheme(): {
     colorScheme: import("./style-sheet/color-scheme").ColorSchemeName;
+    colorSchemeSystem: import("./style-sheet/color-scheme").ColorSchemeSystem;
+    getColorScheme: () => import("./style-sheet/color-scheme").ColorSchemeName;
     setColorScheme: (colorSchemeSystem: import("./style-sheet/color-scheme").ColorSchemeSystem) => void;
     toggleColorScheme: () => void;
 };
diff --git a/dist/use-color-scheme.js b/dist/use-color-scheme.js
index a64178bae2a8f6ec78117c6bce66cdc67d54c480..042a7da7d5364bec203a2739c9da97abb06e301e 100644
--- a/dist/use-color-scheme.js
+++ b/dist/use-color-scheme.js
@@ -2,13 +2,17 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.useColorScheme = void 0;
 const react_1 = require("react");
+const react_native_1 = require("react-native");
 const shim_1 = require("use-sync-external-store/shim");
 const style_sheet_1 = require("./style-sheet");
 function useColorScheme() {
     const store = (0, react_1.useContext)(style_sheet_1.StoreContext);
-    const colorScheme = (0, shim_1.useSyncExternalStore)(store.subscribeColorScheme, store.getColorScheme);
+    const colorScheme = react_native_1.useColorScheme();
+    const colorSchemeSystem = (0, shim_1.useSyncExternalStore)(store.subscribeColorScheme, store.getColorSchemeSystem);
     return {
-        colorScheme,
+        colorScheme: colorSchemeSystem === "system" ? colorScheme : colorSchemeSystem,
+        colorSchemeSystem,
+        getColorScheme: store.getColorScheme,
         setColorScheme: store.setColorScheme,
         toggleColorScheme: store.toggleColorScheme,
     };